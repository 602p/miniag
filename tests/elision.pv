declare nonterminal Expr
declare synthesized attribute step :: Expr
declare inherited attribute flag :: bool
attach attribute step on Expr
attach attribute flag on Expr

declare production base
top::Expr ::= i::int {
	top.step = base(i) #"S";
}

declare production normal
top::Expr ::= a::Expr {
	top.step = normal(a.step) #"S";
	a.flag = top.flag;
}

declare production select
top::Expr ::= a::Expr b::Expr {
	top.step = if top.flag then a.step else b.step #"Sel";
	a.flag = top.flag;
}

declare production setflag
top::Expr ::= f::bool a::Expr {
	top.step = a.step #"Sf";
	a.flag = f;
}

declare production toggle1
top::Expr ::= a::Expr {
	top.step = toggle2(a.step) #"Tog1";
	a.flag = top.flag;
}

declare production toggle2
top::Expr ::= a::Expr {
	top.step = toggle1(a.step) #"Tog2";
	a.flag = top.flag;
}

declare production expanded
top::Expr ::= a::Expr {
	top.step = a.step #"S";
	a.flag = top.flag;
}

declare production expands
top::Expr ::= a::Expr {
	top.step = expanded(expanded(a.step)) #"Exd";
	a.flag = top.flag;
}

declare production elide
top::Expr ::= a::Expr {
	top.step = a.step #"Eli";
	a.flag = top.flag;
}

declare production swap
top::Expr ::= a::Expr b::Expr {
	top.step = swap(b.step, a.step) #"Swp";
	a.flag = top.flag;
	b.flag = top.flag;
}

declare production two
top::Expr ::= a::Expr b::Expr {
	top.step = two(a.step, b.step) #"Two";
	a.flag = top.flag;
	b.flag = top.flag;
}

declare production dup
top::Expr ::= a::Expr {
	top.step = two(a.step, a.step) #"Dup";
	a.flag = top.flag;
}



declare nonterminal Main_nt
declare synthesized attribute start :: Expr
declare synthesized attribute exitcode :: Expr
attach attribute start on Main_nt
attach attribute exitcode on Main_nt

declare production Main
top::Main_nt ::= {
	top.exitcode = top.start.step #"D";
	-- top.start = normal(setflag(true, normal(select(base(1), base(2))))) #"C";
	-- top.start = normal(setflag(true, normal(setflag(false, normal(select(base(1), base(2))))))) #"C";
	-- top.start = normal(expands(normal(base(1)))) #"C";
	-- top.start = normal(elide(normal(base(1)))) #"C";
	-- top.start = normal(toggle1(base(1))) #"C";
	-- top.start = normal(swap(base(1), base(2))) #"C";
	-- top.start = normal(elide(normal(elide(normal(base(1)))))) #"C";
	top.start = normal(dup(normal(base(1)))) #"C";
}